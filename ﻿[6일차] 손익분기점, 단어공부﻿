1. 문제

월드전자는 노트북을 제조하고 판매하는 회사이다. 
노트북 판매 대수에 상관없이 매년 임대료, 재산세, 보험료, 급여 등 A만원의 고정 비용이 들며, 
한 대의 노트북을 생산하는 데에는 재료비와 인건비 등 총 B만원의 가변 비용이 든다고 한다.

예를 들어 A=1,000, B=70이라고 하자. 
이 경우 노트북을 한 대 생산하는 데는 총 1,070만원이 들며, 열 대 생산하는 데는 총 1,700만원이 든다.

노트북 가격이 C만원으로 책정되었다고 한다. 
일반적으로 생산 대수를 늘려 가다 보면 어느 순간 총 수입(판매비용)이 총 비용(=고정비용+가변비용)보다 많아지게 된다. 
최초로 총 수입이 총 비용보다 많아져 이익이 발생하는 지점을 손익분기점(BREAK-EVEN POINT)이라고 한다.

A, B, C가 주어졌을 때, 손익분기점을 구하는 프로그램을 작성하시오.


입력
첫째 줄에 A, B, C가 빈 칸을 사이에 두고 순서대로 주어진다. A, B, C는 21억 이하의 자연수이다.


출력
첫 번째 줄에 손익분기점 즉 최초로 이익이 발생하는 판매량을 출력한다. 손익분기점이 존재하지 않으면 -1을 출력한다.


예제 입력)
1000 70 170


예제 출력)
11


코드


import java.util.Scanner;

public class Main {

public static void main(String[] args) throws Exception {

Scanner scanner = new Scanner(System.in);

//고정비

long fixedCost;

//상품제작단가

long productCost;

//상품판매가

long productPrice;

//전체 지출 비용

long totalCost;

//상품판매대수

long productAmount = 0;

//고정비, 상품제작단가, 상품판매가 입력

fixedCost = scanner.nextInt();

productCost = scanner.nextInt();

productPrice = scanner.nextInt();

//제작단가가 판매가보다 비싸거나같은때 손익분기점없음 종료

if (productCost >= productPrice) {

System.out.println(-1);

return;

}

//전체지출비용에 최초 고정비를 합산

totalCost = fixedCost;

//전체지출비용이 상품판매대수*상품판매가보다 크거나 같을때(손익분기에 도달하지 않았을때) 아래의 처리를 반복수행

while (totalCost >= productAmount * productPrice) {

//상품판매대수 1증가

productAmount++;

//전체지출비용에 상품제작단가 추가

totalCost = totalCost + productCost;

}

// 상품판매대수 출력

System.out.println(productAmount);

}

}



2. 문제
알파벳 대소문자로 된 단어가 주어지면, 이 단어에서 가장 많이 사용된 알파벳이 무엇인지 알아내는 프로그램을 작성하시오. 
단, 대문자와 소문자를 구분하지 않는다.


예제
첫째 줄에 알파벳 대소문자로 이루어진 단어가 주어진다. 주어지는 단어의 길이는 1,000,000을 넘지 않는다.


출력
첫째 줄에 이 단어에서 가장 많이 사용된 알파벳을 대문자로 출력한다. 단, 가장 많이 사용된 알파벳이 여러 개 존재하는 경우에는 ?를 출력한다.


예제 입력)
Mississipi


예제 출력)
?


코드

import java.io.*;
import java.util.LinkedList;



import java.util.*;

public class Test {
	public static void main (String[] args) throws java.lang.Exception {
		ArrayList<Integer>list = new ArrayList<>();
		ArrayList<Integer>test = new ArrayList<>();
		list.add(1333);
		test.add(1333);
		
        // 객체끼리 비교 false
		System.out.println(list.get(0)==test.get(0));
        
        // true
		System.out.println(list.get(0).equals(test.get(0)));
		
		
		int c = list.get(0);
		int d = test.get(0);
		// true
		System.out.println(c==d);
	}
}
